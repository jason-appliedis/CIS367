{"version":3,"file":"useCustomizationSettings.js","sourceRoot":"../src/","sources":["customizations/useCustomizationSettings.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAa,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAC7D,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD;;GAEG;AACH,MAAM,UAAU,wBAAwB,CAAC,UAAoB,EAAE,SAAkB;IAC/E,IAAM,iBAAiB,GAAG,KAAK,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;IAC9D,IAAM,aAAa,GAAG,iBAAiB,CAAC,cAAc,CAAC;IACjD,IAAA,qFAA0G,EAAzG,gBAAQ,EAAE,mBAA+F,CAAC;IAEjH,IAAM,qBAAqB,GAAG,KAAK,CAAC,WAAW,CAAC;QAC9C,IAAM,cAAc,GAAG,cAAc,CAAC,WAAW,CAAC,UAAU,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;QACxF,WAAW,CAAC,cAAc,CAAC,CAAC;IAC9B,CAAC,EAAE,CAAC,UAAU,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC,CAAC;IAE3C,KAAK,CAAC,SAAS,CAAC;QACd,cAAc,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;QAE9C,OAAO,cAAM,OAAA,cAAc,CAAC,SAAS,CAAC,qBAAqB,CAAC,EAA/C,CAA+C,CAAC;IAC/D,CAAC,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAE5B,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import * as React from 'react';\nimport { ISettings, Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\n\n/**\n * Hook to get Customizations settings. It will trigger component state update on settings change observed.\n */\nexport function useCustomizationSettings(properties: string[], scopeName?: string): ISettings {\n  const customizerContext = React.useContext(CustomizerContext);\n  const localSettings = customizerContext.customizations;\n  const [settings, setSettings] = React.useState(Customizations.getSettings(properties, scopeName, localSettings));\n\n  const onCustomizationChange = React.useCallback(() => {\n    const globalSettings = Customizations.getSettings(properties, scopeName, localSettings);\n    setSettings(globalSettings);\n  }, [properties, scopeName, localSettings]);\n\n  React.useEffect(() => {\n    Customizations.observe(onCustomizationChange);\n\n    return () => Customizations.unobserve(onCustomizationChange);\n  }, [onCustomizationChange]);\n\n  return settings;\n}\n"]}