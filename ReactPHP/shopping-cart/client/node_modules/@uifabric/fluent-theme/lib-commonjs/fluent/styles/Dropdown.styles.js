"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var positioning_1 = require("office-ui-fabric-react/lib-commonjs/utilities/positioning");
exports.DropdownStyles = function (props) {
    var _a, _b, _c;
    var disabled = props.disabled, hasError = props.hasError, isOpen = props.isOpen, calloutRenderEdge = props.calloutRenderEdge, theme = props.theme, isRenderingPlaceholder = props.isRenderingPlaceholder;
    if (!theme) {
        throw new Error('theme is undefined or null in base Dropdown getStyles function.');
    }
    var palette = theme.palette, effects = theme.effects;
    var ITEM_HEIGHT = '36px';
    var titleOpenBorderRadius = calloutRenderEdge === positioning_1.RectangleEdge.bottom
        ? effects.roundedCorner2 + " " + effects.roundedCorner2 + " 0 0"
        : "0 0 " + effects.roundedCorner2 + " " + effects.roundedCorner2;
    var calloutOpenBorderRadius = calloutRenderEdge === positioning_1.RectangleEdge.bottom
        ? "0 0 " + effects.roundedCorner2 + " " + effects.roundedCorner2
        : effects.roundedCorner2 + " " + effects.roundedCorner2 + " 0 0";
    var commonItemStyles = {
        minHeight: ITEM_HEIGHT,
        padding: '0 8px',
        display: 'flex',
        alignItems: 'center',
    };
    var itemSelectors = function (isSelected) {
        if (isSelected === void 0) { isSelected = false; }
        return {
            // TODO: After moving fluent to become the default design of Fabric we should revisit this selectors to match the
            // fluent redlines. Currently whenever you hover over an item it forces focus on it so we style the background
            // change through focus selector.
            selectors: {
                '&:hover:focus': {
                    color: palette.neutralDark,
                    backgroundColor: !isSelected ? palette.neutralLighter : palette.neutralLight,
                },
                '&:focus': {
                    backgroundColor: !isSelected ? 'transparent' : palette.neutralLight,
                },
                '&:active': {
                    color: palette.neutralDark,
                    backgroundColor: !isSelected ? palette.neutralLighter : palette.neutralLight,
                },
            },
        };
    };
    return {
        dropdown: [
            disabled && {
                selectors: (_a = {},
                    // Title placeholder states when disabled.
                    _a['&:hover .ms-Dropdown-titleIsPlaceHolder'] = { color: palette.neutralTertiary },
                    _a['&:focus .ms-Dropdown-titleIsPlaceHolder'] = { color: palette.neutralTertiary },
                    _a['&:active .ms-Dropdown-titleIsPlaceHolder'] = { color: palette.neutralTertiary },
                    _a),
            },
            !disabled && {
                selectors: (_b = {},
                    // Title and border states. For :hover and :focus even if the styles are the same we need to keep them
                    // separate for specificity reasons in order :active borderColor to work.
                    _b['&:hover .ms-Dropdown-title'] = {
                        color: palette.neutralDark,
                        borderColor: !isOpen ? palette.neutralPrimary : palette.themePrimary,
                    },
                    _b['&:focus .ms-Dropdown-title'] = {
                        color: palette.neutralDark,
                        borderColor: !isOpen ? palette.neutralPrimary : palette.themePrimary,
                    },
                    _b['&:active .ms-Dropdown-title'] = {
                        color: palette.neutralDark,
                        borderColor: palette.themePrimary,
                    },
                    // CaretDown states are the same for focus, hover, active.
                    _b['&:hover .ms-Dropdown-caretDown, &:focus .ms-Dropdown-caretDown, &:active .ms-Dropdown-caretDown'] = {
                        color: palette.neutralPrimary,
                    },
                    // Title placeholder states when not disabled.
                    _b['&:hover .ms-Dropdown-titleIsPlaceHolder, &:focus .ms-Dropdown-titleIsPlaceHolder, ' +
                        '&:active .ms-Dropdown-titleIsPlaceHolder'] = {
                        color: palette.neutralDark,
                    },
                    // Title has error states
                    _b['&:hover .ms-Dropdown-title--hasError, &:focus .ms-Dropdown-title--hasError, ' +
                        '&:active .ms-Dropdown-title--hasError'] = {
                        borderColor: palette.redDark,
                        color: isRenderingPlaceholder ? palette.neutralSecondary : palette.neutralPrimary,
                    },
                    _b),
            },
        ],
        title: [
            {
                borderRadius: isOpen ? titleOpenBorderRadius : effects.roundedCorner2,
                borderColor: palette.neutralSecondaryAlt,
                padding: "0 28px 0 8px",
            },
            hasError && { borderColor: !isOpen ? palette.red : palette.redDark },
            isOpen && !hasError && { borderColor: palette.themePrimary },
            disabled && { color: palette.neutralTertiary },
        ],
        caretDownWrapper: {
            right: 8,
        },
        caretDown: [
            disabled && {
                color: palette.neutralTertiary,
            },
        ],
        errorMessage: { color: palette.redDark },
        callout: {
            border: 'none',
            borderRadius: calloutOpenBorderRadius,
            boxShadow: effects.elevation8,
            selectors: (_c = {},
                _c['.ms-Callout-main'] = { borderRadius: calloutOpenBorderRadius },
                _c),
        },
        dropdownItemHeader: {
            padding: '0 8px',
            height: ITEM_HEIGHT,
            lineHeight: ITEM_HEIGHT,
        },
        dropdownItem: [commonItemStyles, itemSelectors()],
        dropdownItemSelected: [
            {
                backgroundColor: palette.neutralLight,
                color: palette.neutralDark,
            },
            commonItemStyles,
            itemSelectors(true),
        ],
        dropdownItemDisabled: tslib_1.__assign(tslib_1.__assign({}, commonItemStyles), { color: palette.neutralTertiary }),
        dropdownItemSelectedAndDisabled: tslib_1.__assign(tslib_1.__assign({}, commonItemStyles), { color: palette.neutralTertiary }),
    };
};
//# sourceMappingURL=Dropdown.styles.js.map