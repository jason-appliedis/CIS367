"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Styling_1 = require("office-ui-fabric-react/lib-commonjs/Styling");
var FluentType_1 = require("../FluentType");
var styleConstants_1 = require("./styleConstants");
exports.BreadcrumbStyles = function (props) {
    var _a;
    var theme = props.theme;
    var palette = theme.palette;
    var stateSelectors = {
        ':hover': {
            color: palette.neutralPrimary,
            textDecoration: 'none',
        },
        ':active': {
            backgroundColor: palette.neutralLight,
            textDecoration: 'none',
        },
        // Needs to be revised with designers when moving to default OUFR styles.
        // Now used only to override the default ones to follow fluent specs.
        '&:active:hover': {
            color: palette.neutralPrimary,
            backgroundColor: palette.neutralLight,
            textDecoration: 'none',
        },
    };
    var itemStyle = {
        lineHeight: 36,
        fontSize: FluentType_1.FontSizes.size18,
        outline: 'none',
        fontWeight: Styling_1.FontWeights.regular,
        color: palette.neutralSecondary,
        selectors: tslib_1.__assign((_a = { '.ms-Fabric--isFocusVisible &:focus': {
                    // Necessary due to changes of Link component not using getFocusStyle.
                    outline: 'none',
                } }, _a[styleConstants_1.MediumScreenSelector] = { fontSize: FluentType_1.FontSizes.size18, fontWeight: Styling_1.FontWeights.regular, lineHeight: 36 }, _a[styleConstants_1.MinimumScreenSelector] = { fontSize: FluentType_1.FontSizes.size18, lineHeight: 36 }, _a), stateSelectors),
    };
    var lastChildItem = {
        fontWeight: Styling_1.FontWeights.semibold,
        color: palette.neutralPrimary,
    };
    return {
        root: {
            marginTop: 11,
        },
        itemLink: itemStyle,
        item: itemStyle,
        listItem: {
            selectors: {
                '&:last-child .ms-Breadcrumb-itemLink': lastChildItem,
                '&:last-child .ms-Breadcrumb-item': lastChildItem,
            },
        },
        overflowButton: {
            color: palette.neutralSecondary,
            selectors: tslib_1.__assign({}, stateSelectors),
        },
    };
};
//# sourceMappingURL=Breadcrumb.styles.js.map