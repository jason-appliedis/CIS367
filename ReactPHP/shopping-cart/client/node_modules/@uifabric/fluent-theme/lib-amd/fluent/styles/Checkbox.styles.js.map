{"version":3,"file":"Checkbox.styles.js","sourceRoot":"../src/","sources":["fluent/styles/Checkbox.styles.ts"],"names":[],"mappings":";;;IAEa,QAAA,cAAc,GAAG,UAAC,KAA0B;QAC/C,IAAA,yBAAQ,EAAE,uBAAO,EAAE,mBAAK,CAAW;QACnC,IAAA,qCAAc,EAAE,uBAAO,EAAE,uBAAO,CAAW;QAEnD,OAAO;YACL,QAAQ,EAAE;gBACR;oBACE,YAAY,EAAE,OAAO,CAAC,cAAc;oBACpC,WAAW,EAAE,OAAO,CAAC,cAAc;iBACpC;gBACD,CAAC,QAAQ;oBACP,OAAO,IAAI;oBACT,2DAA2D;oBAC3D,WAAW,EAAE,cAAc,CAAC,sBAAsB;iBACnD;gBACH,QAAQ,IAAI;oBACV,WAAW,EAAE,OAAO,CAAC,kBAAkB;iBACxC;gBACD,OAAO;oBACL,QAAQ,IAAI;oBACV,UAAU,EAAE,OAAO,CAAC,kBAAkB;oBACtC,WAAW,EAAE,OAAO,CAAC,kBAAkB;iBACxC;aACJ;YACD,SAAS,EAAE;gBACT,wEAAwE;gBACxE,KAAK,EAAE,cAAc,CAAC,sBAAsB;aAC7C;YACD,IAAI,EAAE;gBACJ,CAAC,QAAQ,IAAI;oBACX,CAAC,OAAO,IAAI;wBACV,SAAS,EAAE;4BACT,0BAA0B,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,WAAW,EAAE;4BAC1D,+BAA+B,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,gBAAgB,EAAE;yBACrE;qBACF;oBACD,OAAO,IAAI;wBACT,SAAS,EAAE;4BACT,8BAA8B,EAAE;gCAC9B,UAAU,EAAE,OAAO,CAAC,SAAS;gCAC7B,WAAW,EAAE,OAAO,CAAC,SAAS;6BAC/B;4BACD,8BAA8B,EAAE;gCAC9B,UAAU,EAAE,OAAO,CAAC,SAAS;gCAC7B,WAAW,EAAE,OAAO,CAAC,SAAS;6BAC/B;yBACF;qBACF;iBACF;aACF;SACF,CAAC;IACJ,CAAC,CAAC","sourcesContent":["import { ICheckboxStyleProps, ICheckboxStyles } from 'office-ui-fabric-react/lib/Checkbox';\n\nexport const CheckboxStyles = (props: ICheckboxStyleProps): Partial<ICheckboxStyles> => {\n  const { disabled, checked, theme } = props;\n  const { semanticColors, palette, effects } = theme;\n\n  return {\n    checkbox: [\n      {\n        borderRadius: effects.roundedCorner2,\n        borderColor: palette.neutralPrimary,\n      },\n      !disabled &&\n        checked && {\n          // using semanticColor because of setting a new color above\n          borderColor: semanticColors.inputBackgroundChecked,\n        },\n      disabled && {\n        borderColor: palette.neutralTertiaryAlt,\n      },\n      checked &&\n        disabled && {\n          background: palette.neutralTertiaryAlt,\n          borderColor: palette.neutralTertiaryAlt,\n        },\n    ],\n    checkmark: {\n      // using semanticColor to override original behavior on checked/disabled\n      color: semanticColors.inputForegroundChecked,\n    },\n    root: [\n      !disabled && [\n        !checked && {\n          selectors: {\n            ':hover .ms-Checkbox-text': { color: palette.neutralDark },\n            ':hover .ms-Checkbox-checkmark': { color: palette.neutralSecondary },\n          },\n        },\n        checked && {\n          selectors: {\n            ':hover .ms-Checkbox-checkbox': {\n              background: palette.themeDark,\n              borderColor: palette.themeDark,\n            },\n            ':focus .ms-Checkbox-checkbox': {\n              background: palette.themeDark,\n              borderColor: palette.themeDark,\n            },\n          },\n        },\n      ],\n    ],\n  };\n};\n"]}