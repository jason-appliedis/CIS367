define(["require", "exports", "tslib", "office-ui-fabric-react/lib/Styling", "../FluentType", "./styleConstants"], function (require, exports, tslib_1, Styling_1, FluentType_1, styleConstants_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BreadcrumbStyles = function (props) {
        var _a;
        var theme = props.theme;
        var palette = theme.palette;
        var stateSelectors = {
            ':hover': {
                color: palette.neutralPrimary,
                textDecoration: 'none',
            },
            ':active': {
                backgroundColor: palette.neutralLight,
                textDecoration: 'none',
            },
            // Needs to be revised with designers when moving to default OUFR styles.
            // Now used only to override the default ones to follow fluent specs.
            '&:active:hover': {
                color: palette.neutralPrimary,
                backgroundColor: palette.neutralLight,
                textDecoration: 'none',
            },
        };
        var itemStyle = {
            lineHeight: 36,
            fontSize: FluentType_1.FontSizes.size18,
            outline: 'none',
            fontWeight: Styling_1.FontWeights.regular,
            color: palette.neutralSecondary,
            selectors: tslib_1.__assign((_a = { '.ms-Fabric--isFocusVisible &:focus': {
                        // Necessary due to changes of Link component not using getFocusStyle.
                        outline: 'none',
                    } }, _a[styleConstants_1.MediumScreenSelector] = { fontSize: FluentType_1.FontSizes.size18, fontWeight: Styling_1.FontWeights.regular, lineHeight: 36 }, _a[styleConstants_1.MinimumScreenSelector] = { fontSize: FluentType_1.FontSizes.size18, lineHeight: 36 }, _a), stateSelectors),
        };
        var lastChildItem = {
            fontWeight: Styling_1.FontWeights.semibold,
            color: palette.neutralPrimary,
        };
        return {
            root: {
                marginTop: 11,
            },
            itemLink: itemStyle,
            item: itemStyle,
            listItem: {
                selectors: {
                    '&:last-child .ms-Breadcrumb-itemLink': lastChildItem,
                    '&:last-child .ms-Breadcrumb-item': lastChildItem,
                },
            },
            overflowButton: {
                color: palette.neutralSecondary,
                selectors: tslib_1.__assign({}, stateSelectors),
            },
        };
    };
});
//# sourceMappingURL=Breadcrumb.styles.js.map