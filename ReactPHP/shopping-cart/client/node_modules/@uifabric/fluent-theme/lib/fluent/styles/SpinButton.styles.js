import { __assign } from "tslib";
export var SpinButtonStyles = function (props) {
    var SPIN_BUTTON_WIDTH = 23;
    var theme = props.theme;
    if (!theme) {
        throw new Error('Theme is undefined or null.');
    }
    var palette = theme.palette, effects = theme.effects;
    var buttonStyles = {
        color: palette.neutralSecondary,
        width: SPIN_BUTTON_WIDTH,
        selectors: {
            ':hover': {
                backgroundColor: palette.neutralLighter,
                color: palette.neutralSecondary,
            },
            ':active': {
                backgroundColor: palette.neutralLight,
                color: palette.neutralSecondary,
            },
            '.ms-Button-icon': {
                fontSize: 8,
            },
        },
    };
    return {
        spinButtonWrapper: {
            borderRadius: effects.roundedCorner2,
            borderColor: palette.neutralSecondaryAlt,
        },
        input: {
            padding: '0 8px',
            width: "calc(100% - " + SPIN_BUTTON_WIDTH + "px)",
            borderRadius: effects.roundedCorner2 + " 0 0 " + effects.roundedCorner2,
        },
        arrowButtonsContainer: {
            selectors: {
                // No direct style section available so need to target a global className
                '.ms-DownButton': __assign(__assign({}, buttonStyles), { borderRadius: "0 0 " + effects.roundedCorner2 + " 0" }),
                '.ms-UpButton': __assign(__assign({}, buttonStyles), { borderRadius: "0 " + effects.roundedCorner2 + " 0 0" }),
            },
        },
    };
};
//# sourceMappingURL=SpinButton.styles.js.map